spring.application.name=UserMicroService

#Custom single default user config:
#spring.security.user.name=suresh
#spring.security.user.password=s@123

#H2-In memory database config
spring.datasource.url=jdbc:h2:mem:test
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

#jwt config
spring.app.jwtSecret = userfleseymvolinannkhserusroomevasdfghjklaqswdefrgthyjukilop
spring.app.jwt-token-expiry = 216000

logging.level.org.springframework=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.example.securitydemo=DEBUG

#OAuth2 Config:
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Learning Notes:
#Open the Users.ddl file copy the sql schema querry for the current username password table.(store querry in schema.sql file)
#It get create a schema on configured db (now H2) whenever the app booted.

#JWT(JSON Web Token): (jwt.io)
#Without JWT:
#1. There is no expiry time for authenticated user.
#2. Can be decoded easily.
#3. Custom token system -> not standard

#JWT: (header :Signing Algorithm Used(Sha256,RSA).
#     (Payload : contains claims -> user info;)
#     (Signature : secret key)
#
#1. Method for representing claims between two parties.
#1. Token Mechanism which helps autherize users.
#2.Open and industry standard.
#  Token ->   Authorization: Bearer <token>  (token sent as header value in API request)
#3. Token created with expiry time.

#We're going to have these classes
#JWTUtils -> Functions for generate,validate,extract info from token.
#AuthTokenFilter -> check incoming request header having valid jwt or not,setting auth context if token is valid.
#AuthEntryPointJwt
#SecurityConfig